This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-29T18:52:43.610Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
members1st-blocks.php
package.json
src/blocks/custom-button-showcase/block.json
src/blocks/custom-button-showcase/constants.js
src/blocks/custom-button-showcase/edit.js
src/blocks/custom-button-showcase/editor.scss
src/blocks/custom-button-showcase/index.js
src/blocks/custom-button-showcase/index.php
src/blocks/custom-button-showcase/save.js
src/blocks/custom-button-showcase/style.scss
src/blocks/custom-button-showcase/view.js
src/blocks/custom-button/block.json
src/blocks/custom-button/constants.js
src/blocks/custom-button/edit.js
src/blocks/custom-button/editor.scss
src/blocks/custom-button/index.js
src/blocks/custom-button/index.php
src/blocks/custom-button/save.js
src/blocks/custom-button/style.scss
src/blocks/custom-button/view.js
src/features/color-mode-toggle/components/ColorModeToggleButton.js
src/features/color-mode-toggle/index.js
src/features/color-mode-toggle/index.php
src/features/color-mode-toggle/utils/dom.js
src/shared/spacing-control/edit.js
src/shared/spacing-control/editor.scss
src/shared/spacing-control/index.js
src/shared/spacing-control/index.php
src/shared/spacing-control/index.scss
webpack.mix.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Dependencies
/node_modules

# Build files
/build

# IDE and Editor files
.idea/
.vscode/
*.swp
*.swo

# Operating System files
.DS_Store
Thumbs.db

================
File: members1st-blocks.php
================
<?php
/**
 * Plugin Name: Members1st Blocks
 * Description: Enterprise block collection including custom buttons and features
 * Version: 0.1.2
 * Author: Your Name
 * License: GPL-2.0-or-later
 * Text Domain: members1st-blocks
 */

// Exit if accessed directly.
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('MEMBERS1ST_BLOCKS_VERSION', '0.1.2');
define('MEMBERS1ST_BLOCKS_PLUGIN_FILE', __FILE__);
define('MEMBERS1ST_BLOCKS_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('MEMBERS1ST_BLOCKS_PLUGIN_URL', plugin_dir_url(__FILE__));

/**
 * Enqueue block assets.
 */
function members1st_blocks_enqueue_assets() {
    // Custom Button styles
    if (file_exists(MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/blocks/custom-button/style-index.css')) {
        wp_enqueue_style(
            'members1st-custom-button',
            MEMBERS1ST_BLOCKS_PLUGIN_URL . 'build/blocks/custom-button/style-index.css',
            [],
            filemtime(MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/blocks/custom-button/style-index.css')
        );
    }
    
    // Showcase block styles
    if (file_exists(MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/blocks/custom-button-showcase/style-index.css')) {
        wp_enqueue_style(
            'members1st-custom-button-showcase',
            MEMBERS1ST_BLOCKS_PLUGIN_URL . 'build/blocks/custom-button-showcase/style-index.css',
            [],
            filemtime(MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/blocks/custom-button-showcase/style-index.css')
        );
    }
}
add_action('wp_enqueue_scripts', 'members1st_blocks_enqueue_assets');

/**
 * Enqueue block editor assets.
 */
function members1st_blocks_enqueue_block_editor_assets() {
    $deps = [
        'wp-blocks',
        'wp-i18n',
        'wp-element',
        'wp-block-editor',
        'wp-components',
        'wp-data',
        'wp-plugins'
    ];

    // Custom Button script
    wp_enqueue_script(
        'members1st-custom-button',
        MEMBERS1ST_BLOCKS_PLUGIN_URL . 'build/blocks/custom-button/index.js',
        $deps,
        filemtime(MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/blocks/custom-button/index.js'),
        true
    );

    // Showcase block script
    wp_enqueue_script(
        'members1st-custom-button-showcase',
        MEMBERS1ST_BLOCKS_PLUGIN_URL . 'build/blocks/custom-button-showcase/index.js',
        array_merge($deps, ['members1st-custom-button']),
        filemtime(MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/blocks/custom-button-showcase/index.js'),
        true
    );
}
add_action('enqueue_block_editor_assets', 'members1st_blocks_enqueue_block_editor_assets');

// Load block PHP files
require_once MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'src/blocks/custom-button/index.php';
require_once MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'src/blocks/custom-button-showcase/index.php';
require_once MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'src/features/color-mode-toggle/index.php';
require_once MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'src/shared/spacing-control/index.php';

================
File: package.json
================
{
  "name": "members1st-blocks",
  "version": "0.1.2",
  "description": "Enterprise block collection including custom buttons and features",
  "scripts": {
    "dev": "mix",
    "watch": "mix watch",
    "build": "mix --production",
    "format": "prettier --write .",
    "lint": "eslint src/",
    "lint:fix": "eslint src/ --fix"
  },
  "keywords": [
    "wordpress",
    "blocks",
    "gutenberg"
  ],
  "author": "Your Name",
  "license": "GPL-2.0-or-later",
  "dependencies": {
    "@wordpress/block-editor": "^12.15.0",
    "@wordpress/blocks": "^12.24.0",
    "@wordpress/components": "^25.13.0",
    "@wordpress/data": "^9.17.0",
    "@wordpress/element": "^5.24.0",
    "@wordpress/i18n": "^4.47.0",
    "@wordpress/plugins": "^6.15.0"
  },
  "devDependencies": {
    "@babel/core": "^7.23.2",
    "@babel/preset-env": "^7.23.2",
    "@babel/preset-react": "^7.22.15",
    "@wordpress/eslint-plugin": "^17.3.0",
    "@wordpress/prettier-config": "^3.3.0",
    "@wordpress/scripts": "^26.18.0",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.52.0",
    "laravel-mix": "^6.0.49",
    "postcss": "^8.4.31",
    "prettier": "^3.0.3",
    "resolve-url-loader": "^5.0.0",
    "sass": "^1.69.5",
    "sass-loader": "^12.6.0",
    "tailwindcss": "^3.3.5"
  },
  "browserslist": [
    "extends @wordpress/browserslist-config"
  ],
  "prettier": "@wordpress/prettier-config",
  "eslintConfig": {
    "extends": [
      "plugin:@wordpress/eslint-plugin/recommended"
    ]
  }
}

================
File: src/blocks/custom-button-showcase/block.json
================
{
    "$schema": "https://schemas.wp.org/trunk/block.json",
    "apiVersion": 3,
    "name": "members1st/custom-button-showcase",
    "version": "0.1.0",
    "title": "Custom Button Showcase",
    "category": "widgets",
    "icon": "smiley",
    "description": "Example block showcasing button styles.",
    "example": {},
    "supports": {
        "html": false
    },
    "textdomain": "members1st-blocks",
    "editorScript": "file:./index.js",
    "editorStyle": "file:./editor.scss",
    "style": "file:./style.scss",
    "viewScript": "file:./view.js"
}

================
File: src/blocks/custom-button-showcase/constants.js
================
/**
 * Button configuration constants
 */
export const BUTTON_STYLES = [
    { name: "Primary", class: "btn-primary" },
    { name: "Secondary", class: "btn-secondary" },
    { name: "Primary Outline", class: "btn-primary-outline" },
    { name: "Secondary Outline", class: "btn-secondary-outline" },
];

export const BUTTON_SIZES = [
    { name: "Ex Small", class: "btn-xs" },
    { name: "Small", class: "btn-sm" },
    { name: "Medium", class: "btn-md" },
    { name: "Large", class: "btn-lg" },
    { name: "Extra Large", class: "btn-xl" },
    { name: "2X Large", class: "btn-2xl" },
];

================
File: src/blocks/custom-button-showcase/edit.js
================
/**
 * WordPress dependencies
 */
import { __ } from "@wordpress/i18n";
import { useBlockProps } from "@wordpress/block-editor";

/**
 * Internal dependencies
 */
import { BUTTON_STYLES, BUTTON_SIZES } from "./constants";
import "./editor.scss";

/**
 * The edit component for the Custom Button Showcase block.
 * 
 * @return {WPElement} Element to render.
 */
export default function Edit() {
    const blockProps = useBlockProps();

    return (
        <div {...blockProps}>
            <h2 className="text-4xl font-light mb-4">
                {__("Buttons", "members1st-blocks")}
            </h2>
            
            <div className="bg-gray-100 p-6 border border-gray-200 rounded-lg mb-4">
                <h3 className="text-xl font-semibold mb-3">
                    {__("Button Styles", "members1st-blocks")}
                </h3>
                <div className="flex flex-wrap gap-2 mb-6">
                    {BUTTON_STYLES.map((style, index) => (
                        <a 
                            key={index} 
                            href="#"
                            className={`btn ${style.class} text-base px-4 py-2`}
                        >
                            {style.name}
                        </a>
                    ))}
                </div>

                <h3 className="text-xl font-semibold mb-3">
                    {__("Button Sizes", "members1st-blocks")}
                </h3>
                <div className="flex flex-wrap items-center gap-2">
                    {BUTTON_SIZES.map((size, index) => (
                        <a 
                            key={index} 
                            href="#" 
                            className={`btn btn-primary ${size.class}`}
                        >
                            {size.name}
                        </a>
                    ))}
                </div>
            </div>
        </div>
    );
}

================
File: src/blocks/custom-button-showcase/editor.scss
================
.wp-block {
    // Editor-specific styles
}

================
File: src/blocks/custom-button-showcase/index.js
================
/**
 * WordPress dependencies
 */
import { registerBlockType } from "@wordpress/blocks";

/**
 * Internal dependencies
 */
import "./style.scss";
import metadata from "./block.json";
import Edit from "./edit";
import Save from "./save";

registerBlockType(metadata.name, {
    ...metadata,
    edit: Edit,
    save: Save,
});

================
File: src/blocks/custom-button-showcase/index.php
================
<?php
/**
 * Custom Button Showcase Block
 *
 * @package Members1stBlocks
 * @subpackage Blocks
 */

namespace Members1stBlocks\Blocks\CustomButtonShowcase;

// Exit if accessed directly.
if (!defined("ABSPATH")) {
    exit;
}

/**
 * Enqueue block assets for both editor and frontend.
 */
function enqueue_assets() {
    $dir = dirname(__FILE__);
    $block_json = json_decode(file_get_contents("$dir/block.json"), true);

    register_block_type($block_json["name"], array(
        "editor_script" => "members1st-blocks-custom-button-showcase",
        "editor_style"  => "members1st-blocks-custom-button-showcase-editor",
        "style"         => "members1st-blocks-custom-button-showcase",
        "view_script"   => "members1st-blocks-custom-button-showcase-view"
    ));
}
add_action("init", __NAMESPACE__ . "\\enqueue_assets");

================
File: src/blocks/custom-button-showcase/save.js
================
/**
 * WordPress dependencies
 */
import { __ } from "@wordpress/i18n";
import { useBlockProps } from "@wordpress/block-editor";

/**
 * Internal dependencies
 */
import { BUTTON_STYLES, BUTTON_SIZES } from "./constants";

/**
 * The save component for the Custom Button Showcase block.
 * 
 * @return {WPElement} Element to render.
 */
export default function Save() {
    const blockProps = useBlockProps.save();

    return (
        <div {...blockProps}>
            <h2 className="text-4xl font-light mb-4">
                {__("Custom Button Showcase", "members1st-blocks")}
            </h2>
            
            <div className="bg-gray-100 p-6 border border-gray-200 rounded-lg mb-4">
                <h3 className="text-xl font-semibold mb-3">
                    {__("Button Styles", "members1st-blocks")}
                </h3>
                <div className="flex flex-wrap gap-2 mb-6">
                    {BUTTON_STYLES.map((style, index) => (
                        <a 
                            key={index} 
                            href="#" 
                            className={`btn ${style.class} btn-md`}
                        >
                            {style.name}
                        </a>
                    ))}
                </div>

                <h3 className="text-xl font-semibold mb-3">
                    {__("Button Sizes", "members1st-blocks")}
                </h3>
                <div className="flex flex-wrap items-center gap-2">
                    {BUTTON_SIZES.map((size, index) => (
                        <a 
                            key={index} 
                            href="#" 
                            className={`btn btn-primary ${size.class}`}
                        >
                            {size.name}
                        </a>
                    ))}
                </div>
            </div>
        </div>
    );
}

================
File: src/blocks/custom-button-showcase/style.scss
================
.wp-block-members1st-custom-button-showcase {
    .btn {
        cursor: pointer;
        text-decoration: none;
    }
}

================
File: src/blocks/custom-button-showcase/view.js
================
// Frontend JavaScript
console.log("Custom button showcase loaded");

================
File: src/blocks/custom-button/block.json
================
{
    "$schema": "https://schemas.wp.org/trunk/block.json",
    "apiVersion": 2,
    "name": "members1st/custom-button",
    "title": "Custom Button",
    "category": "design",
    "icon": "button",
    "description": "A customizable button block.",
    "supports": {
        "html": false
    },
    "attributes": {
        "content": {
            "type": "string",
            "default": "Button"
        },
        "size": {
            "type": "string",
            "default": "md"
        },
        "style": {
            "type": "string",
            "default": "primary"
        },
        "position": {
            "type": "string",
            "default": "left"
        },
        "uppercase": {
            "type": "boolean",
            "default": true
        },
        "url": {
            "type": "string",
            "default": "#"
        },
        "width": {
            "type": "string",
            "default": "normal"
        },
        "icon": {
            "type": "object",
            "default": null
        },
        "iconPosition": {
            "type": "string",
            "default": "left"
        },
        "target": {
            "type": "string",
            "default": "_self"
        },
        "rel": {
            "type": "string",
            "default": ""
        },
        "ariaLabel": {
            "type": "string",
            "default": ""
        },
        "customClass": {
            "type": "string",
            "default": ""
        },
        "marginTop": {
            "type": "string",
            "default": ""
        },
        "marginRight": {
            "type": "string",
            "default": ""
        },
        "marginBottom": {
            "type": "string",
            "default": ""
        },
        "marginLeft": {
            "type": "string",
            "default": ""
        },
        "paddingTop": {
            "type": "string",
            "default": ""
        },
        "paddingRight": {
            "type": "string",
            "default": ""
        },
        "paddingBottom": {
            "type": "string",
            "default": ""
        },
        "paddingLeft": {
            "type": "string",
            "default": ""
        }
    },
    "textdomain": "members1st-blocks",
    "editorScript": "file:./index.js",
    "editorStyle": "file:./editor.scss",
    "style": "file:./style.scss"
}

================
File: src/blocks/custom-button/constants.js
================
/**
 * Button configuration constants
 */
export const SIZE_CLASSES = {
    xs: "text-xs px-2 py-1",
    sm: "text-sm px-3 py-1.5",
    md: "text-base px-4 py-2",
    lg: "text-lg px-5 py-2.5",
    xl: "text-xl px-6 py-3",
    "2xl": "text-2xl px-8 py-4",
};

export const STYLE_CLASSES = {
    primary: "btn-primary",
    secondary: "btn-secondary",
    "primary-outline": "btn-primary-outline",
    "secondary-outline": "btn-secondary-outline",
};

export const POSITION_CLASSES = {
    left: "justify-start",
    center: "justify-center",
    right: "justify-end",
};

export const WIDTH_CLASSES = {
    normal: "",
    full: "w-full",
    "full-mobile": "w-full md:w-auto",
};

================
File: src/blocks/custom-button/edit.js
================
/**
 * WordPress dependencies
 */
import { __ } from "@wordpress/i18n";
import { 
    InspectorControls, 
    RichText, 
    useBlockProps, 
    URLInput, 
    MediaUpload, 
    MediaUploadCheck 
} from "@wordpress/block-editor";
import { 
    PanelBody, 
    SelectControl, 
    ToggleControl, 
    Button, 
    TextControl 
} from "@wordpress/components";

/**
 * Internal dependencies
 */
import { SIZE_CLASSES, STYLE_CLASSES, POSITION_CLASSES, WIDTH_CLASSES } from "./constants";
import { SpacingControls } from "@shared/spacing-control";
import "./editor.scss";

/**
 * The edit component for the Custom Button block.
 * 
 * @param {Object} props               Block props.
 * @param {Object} props.attributes    Block attributes.
 * @param {Function} props.setAttributes Function to set block attributes.
 * @return {WPElement} Element to render.
 */
export default function Edit({ attributes, setAttributes }) {
    const {
        content,
        size,
        style,
        position,
        uppercase,
        url,
        width,
        icon,
        iconPosition,
        target,
        rel,
        ariaLabel,
        customClass,
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft
    } = attributes;

    const blockProps = useBlockProps();

    const spacingClasses = [
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft
    ].filter(Boolean).join(" ");

    const buttonClasses = `
        btn
        ${SIZE_CLASSES[size]}
        ${STYLE_CLASSES[style]}
        ${uppercase ? "" : "normal-case"}
        ${WIDTH_CLASSES[width]}
        ${customClass}
        ${spacingClasses}
    `;

    const handleContentChange = (newContent) => {
        newContent = newContent.replace(/\n/g, "");
        if (newContent.length > 20) {
            newContent = newContent.slice(0, 20);
        }
        setAttributes({ content: newContent });
    };

    return (
        <>
            <InspectorControls>
                <PanelBody title={__("Button Settings", "members1st-blocks")}>
                    <TextControl
                        label={__("Button Text (max 20 characters)", "members1st-blocks")}
                        value={content}
                        onChange={handleContentChange}
                        maxLength={20}
                        help={`${20 - content.length} characters remaining`}
                    />
                    <SelectControl
                        label={__("Size", "members1st-blocks")}
                        value={size}
                        options={[
                            { label: __("Extra Small", "members1st-blocks"), value: "xs" },
                            { label: __("Small", "members1st-blocks"), value: "sm" },
                            { label: __("Medium", "members1st-blocks"), value: "md" },
                            { label: __("Large", "members1st-blocks"), value: "lg" },
                            { label: __("Extra Large", "members1st-blocks"), value: "xl" },
                            { label: __("2X Large", "members1st-blocks"), value: "2xl" },
                        ]}
                        onChange={(newSize) => setAttributes({ size: newSize })}
                    />
                    <SelectControl
                        label={__("Style", "members1st-blocks")}
                        value={style}
                        options={[
                            { label: __("Primary", "members1st-blocks"), value: "primary" },
                            { label: __("Secondary", "members1st-blocks"), value: "secondary" },
                            { label: __("Primary Outline", "members1st-blocks"), value: "primary-outline" },
                            { label: __("Secondary Outline", "members1st-blocks"), value: "secondary-outline" },
                        ]}
                        onChange={(newStyle) => setAttributes({ style: newStyle })}
                    />
                    <SelectControl
                        label={__("Position", "members1st-blocks")}
                        value={position}
                        options={[
                            { label: __("Left", "members1st-blocks"), value: "left" },
                            { label: __("Center", "members1st-blocks"), value: "center" },
                            { label: __("Right", "members1st-blocks"), value: "right" },
                        ]}
                        onChange={(newPosition) => setAttributes({ position: newPosition })}
                    />
                    <ToggleControl
                        label={__("Uppercase Text", "members1st-blocks")}
                        checked={uppercase}
                        onChange={() => setAttributes({ uppercase: !uppercase })}
                    />
                    <URLInput
                        label={__("Button URL", "members1st-blocks")}
                        value={url}
                        onChange={(newURL) => setAttributes({ url: newURL })}
                    />
                    <SelectControl
                        label={__("Width", "members1st-blocks")}
                        value={width}
                        options={[
                            { label: __("Normal", "members1st-blocks"), value: "normal" },
                            { label: __("Full Width", "members1st-blocks"), value: "full" },
                            { label: __("Full Width Mobile", "members1st-blocks"), value: "full-mobile" },
                        ]}
                        onChange={(newWidth) => setAttributes({ width: newWidth })}
                    />
                    <MediaUploadCheck>
                        <MediaUpload
                            onSelect={(media) => setAttributes({ icon: media })}
                            allowedTypes={["image"]}
                            value={icon ? icon.id : ""}
                            render={({ open }) => (
                                <Button onClick={open} isPrimary>
                                    {icon ? __("Change Icon", "members1st-blocks") : __("Select Icon", "members1st-blocks")}
                                </Button>
                            )}
                        />
                    </MediaUploadCheck>
                    {icon && (
                        <Button isDestructive onClick={() => setAttributes({ icon: null })}>
                            {__("Remove Icon", "members1st-blocks")}
                        </Button>
                    )}
                    <SelectControl
                        label={__("Icon Position", "members1st-blocks")}
                        value={iconPosition}
                        options={[
                            { label: __("Left", "members1st-blocks"), value: "left" },
                            { label: __("Right", "members1st-blocks"), value: "right" },
                        ]}
                        onChange={(newIconPosition) => setAttributes({ iconPosition: newIconPosition })}
                    />
                    <SelectControl
                        label={__("Open link in", "members1st-blocks")}
                        value={target}
                        options={[
                            { label: __("Same tab", "members1st-blocks"), value: "_self" },
                            { label: __("New tab", "members1st-blocks"), value: "_blank" },
                        ]}
                        onChange={(newTarget) => setAttributes({ target: newTarget })}
                    />
                    <TextControl
                        label={__("Rel attribute", "members1st-blocks")}
                        value={rel}
                        onChange={(newRel) => setAttributes({ rel: newRel })}
                        help={__("e.g., noopener, noreferrer", "members1st-blocks")}
                    />
                    <TextControl
                        label={__("Aria Label", "members1st-blocks")}
                        value={ariaLabel}
                        onChange={(newAriaLabel) => setAttributes({ ariaLabel: newAriaLabel })}
                        help={__("Provide a description for screen readers", "members1st-blocks")}
                    />
                    <TextControl
                        label={__("Custom CSS Class", "members1st-blocks")}
                        value={customClass}
                        onChange={(newCustomClass) => setAttributes({ customClass: newCustomClass })}
                    />
                </PanelBody>
                <PanelBody title={__("Spacing Settings", "members1st-blocks")} initialOpen={false}>
                    <SpacingControls attributes={attributes} setAttributes={setAttributes} />
                </PanelBody>
            </InspectorControls>
            <div {...blockProps} className={`wp-block flex ${POSITION_CLASSES[position]}`}>
                <a 
                    className={buttonClasses.trim()}
                    href={url}
                    target={target}
                    rel={rel}
                    aria-label={ariaLabel}
                >
                    {icon && iconPosition === "left" && (
                        <img src={icon.url} alt="" className="w-5 h-5 mr-2" />
                    )}
                    <RichText
                        tagName="span"
                        value={content}
                        onChange={handleContentChange}
                        placeholder={__("Add text…", "members1st-blocks")}
                        allowedFormats={[]}
                    />
                    {icon && iconPosition === "right" && (
                        <img src={icon.url} alt="" className="w-5 h-5 ml-2" />
                    )}
                </a>
            </div>
        </>
    );
}

================
File: src/blocks/custom-button/editor.scss
================
.wp-block {
    // Editor-specific styles
}

================
File: src/blocks/custom-button/index.js
================
/**
 * WordPress dependencies
 */
import { registerBlockType } from "@wordpress/blocks";

/**
 * Internal dependencies
 */
import "./style.scss";
import metadata from "./block.json";
import Edit from "./edit";
import Save from "./save";

registerBlockType(metadata.name, {
    ...metadata,
    edit: Edit,
    save: Save,
});

================
File: src/blocks/custom-button/index.php
================
<?php
/**
 * Custom Button Block
 *
 * @package Members1stBlocks
 * @subpackage Blocks
 */

namespace Members1stBlocks\Blocks\CustomButton;

// Exit if accessed directly.
if (!defined("ABSPATH")) {
    exit;
}

/**
 * Enqueue block assets for both editor and frontend.
 */
function enqueue_assets() {
    $dir = dirname(__FILE__);
    $block_json = json_decode(file_get_contents("$dir/block.json"), true);

    register_block_type($block_json["name"], array(
        "editor_script" => "members1st-blocks-custom-button",
        "editor_style"  => "members1st-blocks-custom-button-editor",
        "style"         => "members1st-blocks-custom-button",
        "view_script"   => "members1st-blocks-custom-button-view"
    ));
}
add_action("init", __NAMESPACE__ . "\\enqueue_assets");

================
File: src/blocks/custom-button/save.js
================
// src/blocks/custom-button/save.js
/**
 * WordPress dependencies
 */
import { __ } from "@wordpress/i18n";
import { useBlockProps } from "@wordpress/block-editor";

/**
 * Internal dependencies
 */
import { SIZE_CLASSES, STYLE_CLASSES, POSITION_CLASSES, WIDTH_CLASSES } from "./constants";

/**
 * The save component for the Custom Button block.
 */
export default function Save({ attributes }) {
    const {
        content,
        size,
        style,
        position,
        uppercase,
        url,
        width,
        icon,
        iconPosition,
        target,
        rel,
        ariaLabel,
        customClass,
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft
    } = attributes;
    
    const blockProps = useBlockProps.save();
 
    const spacingClasses = [
        marginTop ? `mt-${marginTop}` : "",
        marginRight ? `mr-${marginRight}` : "",
        marginBottom ? `mb-${marginBottom}` : "",
        marginLeft ? `ml-${marginLeft}` : "",
        paddingTop ? `pt-${paddingTop}` : "",
        paddingRight ? `pr-${paddingRight}` : "",
        paddingBottom ? `pb-${paddingBottom}` : "",
        paddingLeft ? `pl-${paddingLeft}` : ""
    ].filter(Boolean).join(" ");

    const buttonClasses = `btn ${SIZE_CLASSES[size]} ${STYLE_CLASSES[style]} ${uppercase ? "uppercase" : ""} ${WIDTH_CLASSES[width]} ${spacingClasses} ${customClass}`.trim();

    // Render left icon if needed
    const leftIcon = icon && iconPosition === "left" ? (
        <img src={icon.url} alt="" className="w-5 h-5 mr-2" />
    ) : null;

    // Render right icon if needed
    const rightIcon = icon && iconPosition === "right" ? (
        <img src={icon.url} alt="" className="w-5 h-5 ml-2" />
    ) : null;

    // Button content
    const buttonContent = (
        <>
            {leftIcon}
            <span>{content}</span>
            {rightIcon}
        </>
    );

    return (
        <div {...blockProps} className={`flex ${POSITION_CLASSES[position]}`}>
            <a 
                className={buttonClasses}
                href={url}
                target={target}
                rel={rel}
                aria-label={ariaLabel}
            >
                {buttonContent}
            </a>
        </div>
    );
}

================
File: src/blocks/custom-button/style.scss
================
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease-in-out;
    
    &.btn-primary {
        background-color: #0047bb;
        color: white;
        
        &:hover {
            background-color: #003388;
        }
    }
    
    &.btn-secondary {
        background-color: #718096;
        color: white;
        
        &:hover {
            background-color: #4a5568;
        }
    }
    
    &.btn-primary-outline {
        border: 2px solid #0047bb;
        color: #0047bb;
        
        &:hover {
            background-color: #0047bb;
            color: white;
        }
    }
    
    &.btn-secondary-outline {
        border: 2px solid #718096;
        color: #718096;
        
        &:hover {
            background-color: #718096;
            color: white;
        }
    }
}

================
File: src/blocks/custom-button/view.js
================
// Frontend JavaScript
console.log("Custom button loaded");

================
File: src/features/color-mode-toggle/components/ColorModeToggleButton.js
================
import { useState, useEffect } from "@wordpress/element";

export function ColorModeToggleButton() {
    const [isDark, setIsDark] = useState(false);

    useEffect(() => {
        const editorWrapper = document.querySelector(".editor-styles-wrapper");
        if (editorWrapper) {
            if (isDark) {
                editorWrapper.classList.add("dark");
                document.getElementById("color-mode-toggle-dark-icon").classList.remove("hidden");
                document.getElementById("color-mode-toggle-light-icon").classList.add("hidden");
            } else {
                editorWrapper.classList.remove("dark");
                document.getElementById("color-mode-toggle-dark-icon").classList.add("hidden");
                document.getElementById("color-mode-toggle-light-icon").classList.remove("hidden");
            }
        }
    }, [isDark]);

    function toggleColorMode() {
        setIsDark((prevIsDark) => !prevIsDark);
    }

    return (
        <button
            id="color-mode-toggle"
            type="button"
            onClick={toggleColorMode}
            style={{
                backgroundColor: isDark ? "#2d3748" : "#edf2f7",
                padding: "8px",
                outline: "none",
                transition: "all 0.3s ease-in-out",
                border: "none",
                cursor: "pointer",
            }}
        >
            <svg
                id="color-mode-toggle-dark-icon"
                className={`w-5 h-5${isDark ? "" : " hidden"}`}
                style={{ width: "20px", height: "20px" }}
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
                dangerouslySetInnerHTML={{
                    __html: `<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>`,
                }}
            />
            <svg
                id="color-mode-toggle-light-icon"
                className={`w-5 h-5${isDark ? " hidden" : ""}`}
                style={{ width: "20px", height: "20px" }}
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
                dangerouslySetInnerHTML={{
                    __html: `<path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>`,
                }}
            />
        </button>
    );
}

================
File: src/features/color-mode-toggle/index.js
================
import { registerPlugin } from "@wordpress/plugins";
import { ColorModeToggleButton } from "./components/ColorModeToggleButton";
import { appendColorModeToggleInSettings } from "./utils/dom";

registerPlugin("color-mode-toggle-plugin", {
    render: () => {
        setTimeout(() => {
            appendColorModeToggleInSettings();
        }, 1000);
        return null;
    },
});

================
File: src/features/color-mode-toggle/index.php
================
<?php
/**
 * Color Mode Toggle Feature
 *
 * @package Members1stBlocks
 * @subpackage Features
 */

namespace Members1stBlocks\Features\ColorModeToggle;

// Exit if accessed directly.
if (!defined("ABSPATH")) {
    exit;
}

/**
 * Enqueue editor assets.
 */
function enqueue_editor_assets() {
    $screen = get_current_screen();
    
    if ($screen && $screen->is_block_editor) {
        wp_enqueue_script(
            "members1st-blocks-color-mode-toggle",
            plugins_url("build/features/color-mode-toggle/index.js", MEMBERS1ST_BLOCKS_PLUGIN_FILE),
            array("wp-plugins", "wp-element", "wp-edit-post"),
            filemtime(MEMBERS1ST_BLOCKS_PLUGIN_PATH . "build/features/color-mode-toggle/index.js"),
            true
        );
    }
}
add_action("admin_enqueue_scripts", __NAMESPACE__ . "\\enqueue_editor_assets");

================
File: src/features/color-mode-toggle/utils/dom.js
================
import { ColorModeToggleButton } from "../components/ColorModeToggleButton";
import { render } from "@wordpress/element";

export function appendColorModeToggleInSettings() {
    const settingsBar = document.querySelector(".editor-header__settings");
    const viewButton = document.querySelector(".editor-preview-dropdown");

    if (settingsBar && viewButton) {
        const colorModeToggleWrapper = document.createElement("div");
        colorModeToggleWrapper.id = "color-mode-toggle-wrapper";
        settingsBar.insertBefore(colorModeToggleWrapper, viewButton);

        render(
            <ColorModeToggleButton />,
            document.getElementById("color-mode-toggle-wrapper")
        );
        console.log("Color mode toggle button added to the left of the View button.");
    } else {
        console.warn(".editor-header__settings or View button not found.");
    }
}

================
File: src/shared/spacing-control/edit.js
================
/**
 * WordPress dependencies
 */
import { __ } from "@wordpress/i18n";
import { SelectControl } from "@wordpress/components";

const SPACING_OPTIONS = [
    { label: __("None", "members1st-blocks"), value: "" },
    { label: __("Extra Small (0.25rem)", "members1st-blocks"), value: "1" },
    { label: __("Small (0.5rem)", "members1st-blocks"), value: "2" },
    { label: __("Medium (1rem)", "members1st-blocks"), value: "4" },
    { label: __("Large (1.5rem)", "members1st-blocks"), value: "6" },
    { label: __("Extra Large (2rem)", "members1st-blocks"), value: "8" },
    { label: __("2X Large (3rem)", "members1st-blocks"), value: "12" },
    { label: __("3X Large (4rem)", "members1st-blocks"), value: "16" },
];

/**
 * SpacingControls Component
 *
 * @param {Object} props             Component props.
 * @param {Object} props.attributes  Block attributes.
 * @param {Function} props.setAttributes Function to update block attributes.
 * @return {WPElement} Spacing control elements.
 */
export function SpacingControls({ attributes, setAttributes }) {
    const {
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft
    } = attributes;

    return (
        <div className="spacing-controls">
            <div className="spacing-controls__margins">
                <p className="spacing-controls__section-title">
                    {__("Margin", "members1st-blocks")}
                </p>
                <SelectControl
                    label={__("Top Margin", "members1st-blocks")}
                    value={marginTop}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ marginTop: value ? `mt-${value}` : "" })}
                />
                <SelectControl
                    label={__("Right Margin", "members1st-blocks")}
                    value={marginRight}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ marginRight: value ? `mr-${value}` : "" })}
                />
                <SelectControl
                    label={__("Bottom Margin", "members1st-blocks")}
                    value={marginBottom}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ marginBottom: value ? `mb-${value}` : "" })}
                />
                <SelectControl
                    label={__("Left Margin", "members1st-blocks")}
                    value={marginLeft}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ marginLeft: value ? `ml-${value}` : "" })}
                />
            </div>

            <div className="spacing-controls__padding">
                <p className="spacing-controls__section-title">
                    {__("Padding", "members1st-blocks")}
                </p>
                <SelectControl
                    label={__("Top Padding", "members1st-blocks")}
                    value={paddingTop}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ paddingTop: value ? `pt-${value}` : "" })}
                />
                <SelectControl
                    label={__("Right Padding", "members1st-blocks")}
                    value={paddingRight}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ paddingRight: value ? `pr-${value}` : "" })}
                />
                <SelectControl
                    label={__("Bottom Padding", "members1st-blocks")}
                    value={paddingBottom}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ paddingBottom: value ? `pb-${value}` : "" })}
                />
                <SelectControl
                    label={__("Left Padding", "members1st-blocks")}
                    value={paddingLeft}
                    options={SPACING_OPTIONS}
                    onChange={(value) => setAttributes({ paddingLeft: value ? `pl-${value}` : "" })}
                />
            </div>
        </div>
    );
}

================
File: src/shared/spacing-control/editor.scss
================
.spacing-controls {
    // Editor-specific styles
}

================
File: src/shared/spacing-control/index.js
================
export { SpacingControls } from "./edit";

================
File: src/shared/spacing-control/index.php
================
<?php
/**
 * Spacing Control Component
 *
 * @package Members1stBlocks
 * @subpackage Shared
 */

namespace Members1stBlocks\Shared\SpacingControl;

// Exit if accessed directly.
if (!defined("ABSPATH")) {
    exit;
}

/**
 * Enqueue component assets.
 */
function enqueue_assets() {
    // Only enqueue if file exists
    $style_path = MEMBERS1ST_BLOCKS_PLUGIN_PATH . 'build/shared/spacing-control/index.css';
    
    if (file_exists($style_path)) {
        wp_register_style(
            "members1st-blocks-spacing-control",
            plugins_url("build/shared/spacing-control/index.css", MEMBERS1ST_BLOCKS_PLUGIN_FILE),
            array(),
            filemtime($style_path)
        );
    }
}
add_action("init", __NAMESPACE__ . "\\enqueue_assets");

================
File: src/shared/spacing-control/index.scss
================
.spacing-controls {
    &__section-title {
        font-size: 13px;
        margin: 0;
        font-weight: 500;
        text-transform: uppercase;
        margin-bottom: 8px;
    }

    &__margins,
    &__padding {
        margin-bottom: 24px;

        &:last-child {
            margin-bottom: 0;
        }
    }

    // Adjust select control spacing
    .components-select-control {
        margin-bottom: 16px;

        &:last-child {
            margin-bottom: 0;
        }
    }
}

================
File: webpack.mix.js
================
const mix = require("laravel-mix");
const path = require("path");
const fs = require("fs");

function log(message, data = null) {
    console.log(`[${new Date().toISOString()}] ${message}`);
    if (data) console.log(data);
}

function processBlockFiles(blockDir, buildDir) {
    log(`Processing block: ${path.basename(blockDir)}`);
    
    // Ensure build directory exists
    if (!fs.existsSync(buildDir)) {
        fs.mkdirSync(buildDir, { recursive: true });
    }

    const files = fs.readdirSync(blockDir);
    
    files.forEach(file => {
        const srcFile = path.join(blockDir, file);
        const stats = fs.statSync(srcFile);
        
        if (!stats.isDirectory()) {
            const ext = path.extname(file);
            const blockName = path.basename(blockDir);
            const outputDir = `blocks/${blockName}`;

            switch (ext) {
                case ".js":
                    log(`Processing JS: ${file}`);
                    mix.js(srcFile, outputDir);
                    break;
                case ".scss":
                    log(`Processing SCSS: ${file}`);
                    mix.sass(srcFile, outputDir);
                    break;
                case ".json":
                    log(`Copying JSON: ${file}`);
                    fs.copyFileSync(srcFile, path.join(buildDir, file));
                    break;
                default:
                    log(`Skipping unsupported file: ${file}`);
            }
        }
    });
}

function processFeatureFiles(featureDir, buildDir) {
    log(`Processing feature: ${path.basename(featureDir)}`);
    
    if (!fs.existsSync(buildDir)) {
        fs.mkdirSync(buildDir, { recursive: true });
    }

    const files = fs.readdirSync(featureDir);
    
    files.forEach(file => {
        const srcFile = path.join(featureDir, file);
        const stats = fs.statSync(srcFile);
        
        if (stats.isDirectory()) {
            const subBuildDir = path.join(buildDir, file);
            processFeatureFiles(srcFile, subBuildDir);
        } else {
            const ext = path.extname(file);
            const featureName = path.basename(featureDir);
            const outputDir = `features/${featureName}`;

            switch (ext) {
                case ".js":
                    log(`Processing JS: ${file}`);
                    mix.js(srcFile, outputDir);
                    break;
                case ".scss":
                    log(`Processing SCSS: ${file}`);
                    mix.sass(srcFile, outputDir);
                    break;
                case ".json":
                    log(`Copying JSON: ${file}`);
                    fs.copyFileSync(srcFile, path.join(buildDir, file));
                    break;
                default:
                    log(`Skipping unsupported file: ${file}`);
            }
        }
    });
}

function processSharedFiles(componentDir, buildDir) {
    log(`Processing shared component: ${path.basename(componentDir)}`);
    
    if (!fs.existsSync(buildDir)) {
        fs.mkdirSync(buildDir, { recursive: true });
    }

    const files = fs.readdirSync(componentDir);
    
    files.forEach(file => {
        const srcFile = path.join(componentDir, file);
        const stats = fs.statSync(srcFile);
        
        if (stats.isDirectory()) {
            const subBuildDir = path.join(buildDir, file);
            processSharedFiles(srcFile, subBuildDir);
        } else {
            const ext = path.extname(file);
            const componentName = path.basename(componentDir);
            const outputDir = `shared/${componentName}`;

            switch (ext) {
                case ".js":
                    log(`Processing JS: ${file}`);
                    mix.js(srcFile, outputDir);
                    break;
                case ".scss":
                    log(`Processing SCSS: ${file}`);
                    mix.sass(srcFile, outputDir);
                    break;
                case ".json":
                    log(`Copying JSON: ${file}`);
                    fs.copyFileSync(srcFile, path.join(buildDir, file));
                    break;
                default:
                    log(`Skipping unsupported file: ${file}`);
            }
        }
    });
}

// Main build script
const pluginPath = process.cwd();
const srcPath = path.join(pluginPath, "src");
const blocksPath = path.join(srcPath, "blocks");
const featuresPath = path.join(srcPath, "features");
const sharedPath = path.join(srcPath, "shared");
const buildPath = path.join(pluginPath, "build");

log("Build configuration:", {
    pluginPath,
    srcPath,
    blocksPath,
    featuresPath,
    sharedPath,
    buildPath
});

// Clean build directory
if (fs.existsSync(buildPath)) {
    log("Cleaning build directory...");
    fs.rmSync(buildPath, { recursive: true, force: true });
}

// Set Mix configuration
mix.setResourceRoot("./");
mix.setPublicPath("./");

// Configure webpack
mix.webpackConfig({
    output: {
        path: path.resolve(buildPath),
        publicPath: "",
        filename: "[name].js",
        clean: true,
    },
    module: {
        rules: [{
            test: /\.jsx?$/,
            exclude: /node_modules/,
            use: {
                loader: "babel-loader",
                options: {
                    presets: ["@babel/preset-env", "@babel/preset-react"]
                }
            }
        }]
    },
    externals: {
        "@wordpress/blocks": "wp.blocks",
        "@wordpress/element": "wp.element",
        "@wordpress/components": "wp.components",
        "@wordpress/block-editor": "wp.blockEditor",
        "@wordpress/i18n": "wp.i18n",
        "@wordpress/data": "wp.data",
        "@wordpress/plugins": "wp.plugins",
    },
    resolve: {
        modules: [srcPath, "node_modules"],
        alias: {
            "@shared": path.resolve(srcPath, "shared"),
            "@blocks": path.resolve(srcPath, "blocks"),
        }
    },
});

// Disable CSS URL processing and manifest
mix.options({
    processCssUrls: false,
    manifest: false
});

// Process all blocks
if (fs.existsSync(blocksPath)) {
    log("Processing blocks...");
    const blocks = fs.readdirSync(blocksPath, { withFileTypes: true });
    blocks.forEach(block => {
        if (block.isDirectory()) {
            const blockDir = path.join(blocksPath, block.name);
            const blockBuildDir = path.join(buildPath, "blocks", block.name);
            processBlockFiles(blockDir, blockBuildDir);
        }
    });
}

// Process shared components
if (fs.existsSync(sharedPath)) {
    log("Processing shared components...");
    const components = fs.readdirSync(sharedPath, { withFileTypes: true });
    components.forEach(component => {
        if (component.isDirectory()) {
            const componentDir = path.join(sharedPath, component.name);
            const componentBuildDir = path.join(buildPath, "shared", component.name);
            processSharedFiles(componentDir, componentBuildDir);
        }
    });
}

// Process features
if (fs.existsSync(featuresPath)) {
    log("Processing features...");
    const features = fs.readdirSync(featuresPath, { withFileTypes: true });
    features.forEach(feature => {
        if (feature.isDirectory()) {
            const featureDir = path.join(featuresPath, feature.name);
            const featureBuildDir = path.join(buildPath, "features", feature.name);
            processFeatureFiles(featureDir, featureBuildDir);
        }
    });
}

// Development settings
if (!mix.inProduction()) {
    mix.sourceMaps();
}

// Log completion
mix.then(() => {
    log("Build completed!");
    
    function listFiles(dir, prefix = "") {
        const items = fs.readdirSync(dir, { withFileTypes: true });
        items.forEach(item => {
            const fullPath = path.join(dir, item.name);
            if (item.isDirectory()) {
                log(`${prefix}${item.name}/`);
                listFiles(fullPath, `${prefix}  `);
            } else {
                const stats = fs.statSync(fullPath);
                log(`${prefix}${item.name} (${stats.size} bytes)`);
            }
        });
    }
    
    log("Build directory contents:");
    listFiles(buildPath);
});
